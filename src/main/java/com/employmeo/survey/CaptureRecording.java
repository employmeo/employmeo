package com.employmeo.survey;

import java.util.logging.Logger;

import javax.ws.rs.GET;
import javax.ws.rs.POST;
import javax.ws.rs.Path;
import javax.ws.rs.Produces;
import javax.ws.rs.QueryParam;
import javax.ws.rs.core.MediaType;

import com.employmeo.objects.Account;
import com.employmeo.objects.Respondant;
import com.twilio.sdk.verbs.Say;
import com.twilio.sdk.verbs.TwiMLException;
import com.twilio.sdk.verbs.TwiMLResponse;

@Path("capturerecording")
public class CaptureRecording {
	
	private static Logger logger = Logger.getLogger("com.employmeo.survey");
	
	/*******************
	 * For all voice data Collection using the Twilio API, the following
	 * parameters come with the API call from Twilio:
	 * allSid	A unique identifier for this call, generated by Twilio.
	 * @param AccountSid	Your Twilio account id. It is 34 characters long,
	 * 						and always starts with the letters AC.
	 * @param From			The phone number, URI or client identifier
	 * @param To			The phone number, URI or client identifier
	 * @param CallStatus	A descriptive status for the call. The value is
	 * 						one of queued, ringing, in-progress, completed, 
	 * 						busy, failed or no-answer.
	 * @param ApiVersion	The version of the Twilio API.
	 * @param Direction		A string describing the direction of the call.
	 * @param ForwardedFrom	This parameter is set only when Twilio receives 
	 * 						a forwarded call, but depends on the carrier
	 * @param CallerName	VoiceCallerIdLookup value ($0.01 per look up).
	 * @return TwiML 		Response
	 */
	
	
	@GET
	@Produces(MediaType.TEXT_PLAIN)
	public String doGet(
			@QueryParam ("From") String twiFrom,
			@QueryParam ("RecordingUrl") String recUrl,
			@QueryParam ("RecordingDuration") Integer recDuration,
			@QueryParam("respondant_id") Long respondantId,
			@QueryParam("question_id") Long questionId,
			@QueryParam("account_id") Long accountId) {
		
		StringBuffer msg = new StringBuffer();
		msg.append("Recording received from: ");
		msg.append(twiFrom);
		msg.append(", with parameters:");	
		if (respondantId != null) {
			msg.append(" {respondant_id = ");
			msg.append(respondantId);
			msg.append("}");
		}
		if (questionId != null) {
			msg.append(" {question_id = ");
			msg.append(questionId);
			msg.append("}");
		}
		if (accountId != null) {
			msg.append(" {account_id = ");
			msg.append(accountId);
			msg.append("}");
		}
		if (recUrl != null) {
			msg.append(" {RecordingUrl = ");
			msg.append(recUrl);
			msg.append("}");
		}
		logger.info(msg.toString());
		
		return produceTwiML(recUrl, respondantId);
		
	}

	public String produceTwiML(String payrollId, Long accountId) {
	    TwiMLResponse response = new TwiMLResponse();
 
	    // Account ID?
	    Say message;
	    if (accountId != null) {
	    	Account account = Account.getAccountById(accountId);
	    	if (account != null) {
		    	Respondant resp = account.getRespondantByPayrollId(payrollId);
		    	if (resp != null) {
		    		message = new Say("You are " + resp.getPerson().getPersonFullName()+ " ?");
		    	} else {
		    		message = new Say("Can't find you");
		    	}
	    	} else {
	    		message = new Say("Can't find your account");	    		
	    	}
	    } else {
	    	message = new Say("We didn't get your account ID");
	    }

	    
	    // Gather
	    //Gather gather = new Gather();
	    //gather.setNumDigits(10);
	    //say = new Say("Press 1");

	    // Redirect
	    //Redirect redirect = new Redirect();
        
        //redirect = new Redirect();
        //redirect.set("crazy", "delicious");
        
	    try {
//	        response.append(thanks);
	        response.append(message);
//	        gather.append(say);
//	        response.append(gather);
//	        response.append(redirect);
	    } catch (TwiMLException e) {
	        e.printStackTrace();
	    }
	
	    System.out.println(response.toXML());
	    
	    return response.toEscapedXML();
	}
}