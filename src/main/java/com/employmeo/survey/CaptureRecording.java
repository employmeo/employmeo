package com.employmeo.survey;

import java.util.logging.Logger;

import javax.ws.rs.GET;
import javax.ws.rs.POST;
import javax.ws.rs.Path;
import javax.ws.rs.Produces;
import javax.ws.rs.QueryParam;
import javax.ws.rs.core.MediaType;

import com.employmeo.objects.Account;
import com.employmeo.objects.Answer;
import com.employmeo.objects.Question;
import com.employmeo.objects.Respondant;
import com.employmeo.objects.Survey;
import com.employmeo.objects.SurveyQuestion;
import com.employmeo.objects.SurveySection;
import com.twilio.sdk.verbs.Record;
import com.twilio.sdk.verbs.Redirect;
import com.twilio.sdk.verbs.Say;
import com.twilio.sdk.verbs.TwiMLException;
import com.twilio.sdk.verbs.TwiMLResponse;

@Path("capturerecording")
public class CaptureRecording {
	
	private static Logger logger = Logger.getLogger("com.employmeo.survey");
	
	/*******************
	 * For all voice data Collection using the Twilio API, the following
	 * parameters come with the API call from Twilio:
	 * allSid	A unique identifier for this call, generated by Twilio.
	 * @param AccountSid	Your Twilio account id. It is 34 characters long,
	 * 						and always starts with the letters AC.
	 * @param From			The phone number, URI or client identifier
	 * @param To			The phone number, URI or client identifier
	 * @param CallStatus	A descriptive status for the call. The value is
	 * 						one of queued, ringing, in-progress, completed, 
	 * 						busy, failed or no-answer.
	 * @param ApiVersion	The version of the Twilio API.
	 * @param Direction		A string describing the direction of the call.
	 * @param ForwardedFrom	This parameter is set only when Twilio receives 
	 * 						a forwarded call, but depends on the carrier
	 * @param CallerName	VoiceCallerIdLookup value ($0.01 per look up).
	 * @return TwiML 		Response
	 */
	
	
	@GET
	@Produces(MediaType.TEXT_PLAIN)
	public String doGet(
			@QueryParam ("From") String twiFrom,
			@QueryParam ("RecordingUrl") String recUrl,
			@QueryParam ("RecordingDuration") Integer recDuration,
			@QueryParam("respondant_id") Long respondantId,
			@QueryParam("question_id") Long questionId) {
		
		StringBuffer msg = new StringBuffer();
		msg.append("Recording received from: ");
		msg.append(twiFrom);
		msg.append(", with parameters:");	
		if (respondantId != null) {
			msg.append(" {respondant_id = ");
			msg.append(respondantId);
			msg.append("}");
		}
		Respondant respondant = Respondant.getRespondantById(respondantId);
		respondant.refreshMe();
		if ((questionId != null) && (recUrl != null)) {
			msg.append(" {question_id = ");
			msg.append(questionId);
			msg.append("}");
			msg.append(" {RecordingUrl = ");
			msg.append(recUrl);
			msg.append("}");
			// Save the response
			com.employmeo.objects.Response recording = new com.employmeo.objects.Response();
			recording.setRespondant(respondant);
			recording.setResponseText(recUrl);
			recording.setResponseValue(recDuration);
			recording.setResponseQuestionId(questionId);
			recording.persistMe();
			respondant.addResponse(recording);
		}
		logger.info(msg.toString());
		
		// present the next question
		
		return produceTwiML(respondant);
		
	}


	public String produceTwiML(Respondant resp) {
	    TwiMLResponse response = new TwiMLResponse();
	    
	    // Found Respondant?

        SurveyQuestion question = resp.nextQuestion();
        
        if (question != null) {  
	        Say prompt = new Say("Question " + question.getSqSequence() + ". " +
	        					question.getQuestion().getQuestionText());
	        Record record = new Record();
	        record.setMethod("GET");
	        record.setAction("/survey/capturerecording?" + 
	        						"&respondant_id=" + resp.getRespondantId() + 
	        						"&question_id=" + question.getQuestion().getQuestionId());
	        record.setMaxLength(90);
	
	        Say tryagain = new Say("Sorry - we did not recieve a response. Please try again.");
	        Redirect redirect = new Redirect("/survey/capturerecording?" +
	        									"respondant_id=" + resp.getRespondantId());
	        redirect.setMethod("GET");
	        redirect.set("respondant_id",resp.getRespondantId().toString());
	    	try {
	    	        response.append(prompt);
	    	        response.append(record);
	    	        response.append(tryagain);
	    	        response.append(redirect);
	    	} catch (TwiMLException e) {
	    	        e.printStackTrace();
	    	}
        } else {
	        Say goodbye = new Say("Thank You. You have completed the questionairre. Goodbye.");
	    	try {
    	        response.append(goodbye);
	    	} catch (TwiMLException e) {
    	        e.printStackTrace();
	    	}
        }
	
	    return response.toEscapedXML();
	}
}