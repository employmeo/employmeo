package com.employmeo.survey;

import java.util.List;
import java.util.logging.Logger;

import javax.ws.rs.GET;
import javax.ws.rs.Path;
import javax.ws.rs.Produces;
import javax.ws.rs.QueryParam;
import javax.ws.rs.core.MediaType;

import com.employmeo.objects.Account;
import com.employmeo.objects.AccountSurvey;
import com.employmeo.objects.Question;
import com.employmeo.objects.Respondant;
import com.employmeo.objects.Survey;
import com.employmeo.objects.SurveyQuestion;
import com.employmeo.objects.SurveySection;
import com.employmeo.util.ExternalLinksUtil;
import com.twilio.sdk.verbs.Record;
import com.twilio.sdk.verbs.Redirect;
import com.twilio.sdk.verbs.Say;
import com.twilio.sdk.verbs.TwiMLException;
import com.twilio.sdk.verbs.TwiMLResponse;

@Path("getvoicesurvey")
public class GetVoiceSurvey {
	
	private static Logger logger = Logger.getLogger("com.employmeo.survey");
	
	/*******************
	 * For all voice data Collection using the Twilio API, the following
	 * parameters come with the API call from Twilio:
	 * allSid	A unique identifier for this call, generated by Twilio.
	 * @param AccountSid	Your Twilio account id. It is 34 characters long,
	 * 						and always starts with the letters AC.
	 * @param From			The phone number, URI or client identifier
	 * @param To			The phone number, URI or client identifier
	 * @param CallStatus	A descriptive status for the call. The value is
	 * 						one of queued, ringing, in-progress, completed, 
	 * 						busy, failed or no-answer.
	 * @param ApiVersion	The version of the Twilio API.
	 * @param Direction		A string describing the direction of the call.
	 * @param ForwardedFrom	This parameter is set only when Twilio receives 
	 * 						a forwarded call, but depends on the carrier
	 * @param CallerName	VoiceCallerIdLookup value ($0.01 per look up).
	 * @return TwiML 		Response
	 */
	
	
	@GET
	@Produces(MediaType.TEXT_PLAIN)
	public String doGet(
			@QueryParam ("From") String twiFrom,
			@QueryParam("Digits") String twiDigits,
			@QueryParam("respondant_id") Long respondantId,
			@QueryParam("as_id") Long asId) {
		
		Respondant respondant = null;
		StringBuffer msg = new StringBuffer();
		msg.append("Voice call from: ");
		msg.append(twiFrom);
		msg.append(", with parameters:");	
		if (respondantId != null) {
			msg.append(" {respondant_id = ");
			msg.append(respondantId);
			msg.append("}");
			respondant = Respondant.getRespondantById(respondantId);
		} else {
			if (asId != null) {
				msg.append(" {as_id = ");
				msg.append(asId);
				msg.append("}");
			}
			if (twiDigits != null) {
				msg.append(" {Digits = ");
				msg.append(twiDigits);
				msg.append("}");
			}
			respondant = getRespondantFrom(twiDigits, asId);
		}
		logger.info(msg.toString());

		return produceTwiML(respondant);
		
	}

	public Respondant getRespondantFrom(String twiDigits, Long asId) {

		AccountSurvey survey = AccountSurvey.getAccountSurveyByASID(asId);
		Respondant respondant = null;
		if (survey != null) {
			Account account = Account.getAccountById(survey.getAsAccountId());
			respondant = account.getRespondantByPayrollId(twiDigits);
			if (respondant != null) respondant.refreshMe();
		}
		return respondant;
	}

	public String produceTwiML(Respondant resp) {
	    TwiMLResponse response = new TwiMLResponse();
 
	    // Found Respondant
    	if (resp != null) {
        	Survey survey = resp.getAccountSurvey().getSurvey();
        	// TODO hard coded to assume we have only one section... need to fix!
        	SurveySection section = survey.getSurveySections().get(0);
    		Say thanks = new Say("Thank you. You are " + resp.getPerson().getPersonFullName()+ " .");
        	Say instructions = new Say(section.getSsInstructions());
        	
        	SurveyQuestion question = resp.nextQuestion();
 
	        if (question == null) {
	        	Say goodbye = new Say("Thank You. You have completed the questionairre. Goodbye.");
		    	try {
	    	        response.append(goodbye);
		    	} catch (TwiMLException e) {
	    	        e.printStackTrace();
		    	}
	        } else {
        	
	            Say prompt = new Say("Question " + question.getSqSequence() + ". " +
						question.getQuestion().getQuestionText());
	        	Record record = new Record();
	        	record.setMethod("GET");
		        record.setAction(ExternalLinksUtil.BASE_SURVEY_URL + 
		        					"/survey/capturerecording?" + 
	        						"&amp;respondant_id=" + resp.getRespondantId() + 
	        						"&amp;question_id=" + question.getQuestion().getQuestionId());
	        	record.setMaxLength(90);
	
	        	Say tryagain = new Say("Sorry - we did not recieve a response. Please try again.");
		        Redirect redirect = new Redirect(ExternalLinksUtil.BASE_SURVEY_URL + 
						"/survey/capturerecording?" + 
						"&amp;respondant_id=" + resp.getRespondantId());
	        	redirect.setMethod("GET");
	        	redirect.set("respondant_id",resp.getRespondantId().toString());
	    	    try {
	    	        response.append(thanks);
	    	        response.append(instructions);
	    	        response.append(prompt);
	    	        response.append(record);
	    	        response.append(tryagain);
	    	        response.append(redirect);
	    	    } catch (TwiMLException e) {
	    	        e.printStackTrace();
	    	    }
	        }
    	} else {
    		Say sorry = new Say("Sorry. We are unable to match your ID. Goodbye!");
    	    try {
    	        response.append(sorry);
    	    } catch (TwiMLException e) {
    	        e.printStackTrace();
    	    }   	
    	}
	    
	    return response.toEscapedXML();
	}
}